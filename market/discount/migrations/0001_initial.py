# Generated by Django 4.2.7 on 2023-11-30 15:21

from decimal import Decimal
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("products", "0003_alter_category_slug_category_unique_parent_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="CartPromo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=128, verbose_name="наименование скидки")),
                (
                    "description",
                    models.TextField(blank=True, max_length=1024, verbose_name="подробное описание скидки"),
                ),
                (
                    "weight",
                    models.FloatField(
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.01),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="вес скидки",
                    ),
                ),
                ("active_from", models.DateTimeField(blank=True, null=True, verbose_name="действует от ")),
                ("active_to", models.DateTimeField(blank=True, null=True, verbose_name="действует до ")),
                ("is_active", models.BooleanField(default=False, verbose_name="скидка активна")),
                ("items_from", models.IntegerField(blank=True, null=True, verbose_name="кол-во товаров в корзине от")),
                ("items_to", models.IntegerField(blank=True, null=True, verbose_name="кол-во товаров в корзине до")),
                (
                    "price_from",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="общая стоимость корзины от",
                    ),
                ),
                (
                    "price_to",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="общая стоимость корзины до",
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                        verbose_name="размер скидки в рублях",
                    ),
                ),
            ],
            options={
                "verbose_name": "скидка на корзину",
                "verbose_name_plural": "скидки на корзину",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SetPromo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=128, verbose_name="наименование скидки")),
                (
                    "description",
                    models.TextField(blank=True, max_length=1024, verbose_name="подробное описание скидки"),
                ),
                ("active_from", models.DateTimeField(blank=True, null=True, verbose_name="действует от ")),
                ("active_to", models.DateTimeField(blank=True, null=True, verbose_name="действует до ")),
                ("is_active", models.BooleanField(default=False, verbose_name="скидка активна")),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                        verbose_name="размер скидки в рублях",
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.01),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="вес скидки",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="categories_set",
                        to="products.category",
                        verbose_name="набор категорий",
                    ),
                ),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True, related_name="products_set", to="products.product", verbose_name="набор товаров"
                    ),
                ),
            ],
            options={
                "verbose_name": "скидка на наборы продуктов и/или категорий",
                "verbose_name_plural": "скидки на наборы продуктов и/или категорий",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProductPromo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=128, verbose_name="наименование скидки")),
                (
                    "description",
                    models.TextField(blank=True, max_length=1024, verbose_name="подробное описание скидки"),
                ),
                (
                    "weight",
                    models.FloatField(
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.01),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="вес скидки",
                    ),
                ),
                ("active_from", models.DateTimeField(blank=True, null=True, verbose_name="действует от ")),
                ("active_to", models.DateTimeField(blank=True, null=True, verbose_name="действует до ")),
                ("is_active", models.BooleanField(default=False, verbose_name="скидка активна")),
                (
                    "value",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="размер скидки в процентах",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True, related_name="categories_promos", to="products.category", verbose_name="категории"
                    ),
                ),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True, related_name="products_promos", to="products.product", verbose_name="товары"
                    ),
                ),
            ],
            options={
                "verbose_name": "скидка на продукт(ы) и/или категорию(ии)",
                "verbose_name_plural": "скидки на продукт(ы) и/или категорию(ии)",
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="cartpromo",
            constraint=models.CheckConstraint(
                check=models.Q(("items_from__lte", models.F("items_to"))), name="items_from_lte_items_to"
            ),
        ),
        migrations.AddConstraint(
            model_name="cartpromo",
            constraint=models.CheckConstraint(
                check=models.Q(("price_from__lte", models.F("price_to"))), name="price_from_lte_price_to"
            ),
        ),
        migrations.AddConstraint(
            model_name="setpromo",
            constraint=models.CheckConstraint(
                check=models.Q(("active_from__lte", models.F("active_to"))), name="setpromo_date_from_lte_date_to"
            ),
        ),
        migrations.AddConstraint(
            model_name="productpromo",
            constraint=models.CheckConstraint(
                check=models.Q(("active_from__lte", models.F("active_to"))), name="productpromo_date_from_lte_date_to"
            ),
        ),
    ]
